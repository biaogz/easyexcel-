
   //创建没有自定义模型,没有sheet的解析器,默认解析所有sheet解析结果以List<String>的方式通知监听者
    @Test
    public void testExcel2007NoModel() {
        InputStream inputStream = getInputStream("2007.xlsx");

        final List<Object> data = new ArrayList<Object>();

        new ExcelReader(new AnalysisParam(inputStream, ExcelTypeEnum.XLSX, null), new AnalysisEventListener() {

            public void invoke(Object object, AnalysisContext context) {
                System.out.println(object);
            }

            public void doAfterAllAnalysed(AnalysisContext context) {

            }
        }).read();
        assertTrue(data.size()>0);
    }

    //创建没有自定义模型,但有规定sheet解析器,解析结果以List<String>的方式通知监听者
    @Test
    public void testExcel2007WithSheet() {
        InputStream inputStream = getInputStream("2007.xlsx");

        final List<Object> data = new ArrayList<Object>();

        new ExcelReader(new AnalysisParam(inputStream, ExcelTypeEnum.XLSX, null), new AnalysisEventListener() {

            public void invoke(Object object, AnalysisContext context) {
                data.add(object);
            }

            public void doAfterAllAnalysed(AnalysisContext context) {

            }
        }).read(new Sheet(1,1));
        assertTrue(data.size()>0);
    }

    //创建需要反射映射模型的解析器,解析结果List<Object> Object为自定义的模型
    @Test
    public void testExcel2007WithReflectModel() {
        InputStream inputStream = getInputStream("2007.xlsx");

        final List<Object> data = new ArrayList<Object>();

        new ExcelReader(new AnalysisParam(inputStream, ExcelTypeEnum.XLSX, null), new AnalysisEventListener() {

            public void invoke(Object object, AnalysisContext context) {
                data.add(object);
            }

            public void doAfterAllAnalysed(AnalysisContext context) {

            }
        }).read(new Sheet(1,1),OneRowHeadExcelModel.class);
        assertTrue(data.size()>0);

    }

    @Test
    public void testExcel2007MultHeadWithReflectModel() {
        InputStream inputStream = getInputStream("2007_1.xlsx");

        final List<Object> data = new ArrayList<Object>();

        new ExcelReader(new AnalysisParam(inputStream, ExcelTypeEnum.XLSX, null), new AnalysisEventListener() {

            public void invoke(Object object, AnalysisContext context) {
                data.add(object);
            }

            public void doAfterAllAnalysed(AnalysisContext context) {

            }
        }).read(new Sheet(1,3),MultiLineHeadExcelModel.class);


    }



    private InputStream getInputStream(String fileName) {
        return Thread.currentThread().getContextClassLoader().getResourceAsStream(""+fileName);

    }
    
      //写excel
    @Test
    public void testCreate(){

        ExcelWriter writer = null;
        try {
            writer =
                new ExcelWriter(new GenerateParam("66", MultiLineHeadExcelModel.class,new FileOutputStream("/Users/jipengfei/77.xlsx")));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        writer.write(getdatas());
        writer.finish();
    }

    
    
    